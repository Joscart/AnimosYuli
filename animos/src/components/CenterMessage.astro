---
interface Props {
  message?: string;
  centerGifSrc: string;
  specialImageSrc?: string;
}

const { message = "Animos Yuli <3", centerGifSrc, specialImageSrc } = Astro.props;
---

<div class="center-content">
  <div class="message-container" id="messageBox">
    <div class="gif-background">
      <img src={centerGifSrc} alt="Center GIF" />
    </div>
    <h1 class="message">{message}</h1>
  </div>
</div>

<!-- Special popup image overlay -->
<div class="special-popup" id="specialPopup">
  <img src={specialImageSrc} alt="Special!" id="specialImage" />
</div>

<script>
  const messageBox = document.getElementById('messageBox');
  const specialPopup = document.getElementById('specialPopup');
  const specialImage = document.getElementById('specialImage');
  let clickCount = 0;
  
  if (messageBox && specialPopup && specialImage) {
    messageBox.addEventListener('click', () => {
      clickCount++;
      
      // Show special popup after 10 clicks
      if (clickCount === 10) {
        specialPopup.classList.add('show');
        
        // Hide after 3 seconds
        setTimeout(() => {
          specialPopup.classList.add('hide');
          
          // Reset after animation completes
          setTimeout(() => {
            specialPopup.classList.remove('show', 'hide');
            clickCount = 0; // Reset counter
          }, 600);
        }, 3000);
      }
      
      const rect = messageBox.getBoundingClientRect();
      const heartEmojis = ['üíñ', 'üíï', 'üíó', 'üíì', 'üíù'];
      
      // Create 5 hearts from random positions on the border
      for (let i = 0; i < 5; i++) {
        const heart = document.createElement('div');
        heart.className = 'floating-heart';
        heart.textContent = heartEmojis[i];
        
        // Random side: 0=top, 1=right, 2=bottom, 3=left
        const side = Math.floor(Math.random() * 4);
        let startX, startY, angle;
        
        switch(side) {
          case 0: // Top edge
            startX = rect.left + Math.random() * rect.width;
            startY = rect.top;
            angle = -90 + (Math.random() * 60 - 30); // -120 to -60 degrees
            break;
          case 1: // Right edge
            startX = rect.right;
            startY = rect.top + Math.random() * rect.height;
            angle = 0 + (Math.random() * 60 - 30); // -30 to 30 degrees
            break;
          case 2: // Bottom edge
            startX = rect.left + Math.random() * rect.width;
            startY = rect.bottom;
            angle = 90 + (Math.random() * 60 - 30); // 60 to 120 degrees
            break;
          case 3: // Left edge
            startX = rect.left;
            startY = rect.top + Math.random() * rect.height;
            angle = 180 + (Math.random() * 60 - 30); // 150 to 210 degrees
            break;
        }
        
        // Convert angle to radians for direction calculation
        const angleRad = (angle * Math.PI) / 180;
        const distance = 100 + Math.random() * 50; // Travel 100-150px
        
        const endX = Math.cos(angleRad) * distance;
        const endY = Math.sin(angleRad) * distance;
        
        heart.style.left = `${startX}px`;
        heart.style.top = `${startY}px`;
        
        // Random animation duration between 1-1.5 seconds
        const duration = 1 + Math.random() * 0.5;
        heart.style.animationDuration = `${duration}s`;
        
        // Set CSS variables for animation
        heart.style.setProperty('--end-x', `${endX}px`);
        heart.style.setProperty('--end-y', `${endY}px`);
        heart.style.setProperty('--rotation', `${Math.random() * 720 - 360}deg`);
        
        document.body.appendChild(heart);
        
        // Remove after animation completes
        setTimeout(() => {
          heart.remove();
        }, duration * 1000);
      }
    });
  }
</script>

<style>
  .center-content {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .message-container {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 2rem 3rem;
    border-radius: 20px;
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    border: 2px solid rgba(255, 255, 255, 0.3);
    animation: pulse-glow 3s ease-in-out infinite;
    cursor: pointer;
    transition: transform 0.2s ease;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }

  .message-container:hover {
    transform: scale(1.05);
  }

  .message-container:active {
    transform: scale(0.98);
  }

  .gif-background {
    position: absolute;
    width: 120px;
    height: 120px;
    z-index: -1;
    opacity: 0.4;
    border-radius: 15px;
    overflow: hidden;
  }

  .gif-background img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .message {
    font-size: 3rem;
    font-weight: bold;
    background: linear-gradient(
      45deg,
      #ff6b9d,
      #c56cf0,
      #4facfe,
      #00f2fe,
      #ff6b9d
    );
    background-size: 300% 300%;
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    animation: gradient-shift 5s ease infinite;
    text-align: center;
    letter-spacing: 2px;
  }

  @media (max-width: 768px) {
    .message {
      font-size: 2rem;
    }

    .message-container {
      padding: 1.5rem 2rem;
    }

    .gif-background {
      width: 80px;
      height: 80px;
    }
  }

  @media (max-width: 480px) {
    .message {
      font-size: 1.5rem;
    }

    .message-container {
      padding: 1rem 1.5rem;
    }
  }

  @keyframes gradient-shift {
    0%, 100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }

  @keyframes pulse-glow {
    0%, 100% {
      box-shadow: 0 8px 32px rgba(255, 107, 157, 0.3),
                  0 0 20px rgba(197, 108, 240, 0.2);
    }
    50% {
      box-shadow: 0 8px 32px rgba(255, 107, 157, 0.5),
                  0 0 40px rgba(197, 108, 240, 0.4);
    }
  }

  /* Special popup styles */
  .special-popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.8);
    z-index: 9999;
    display: none;
    justify-content: center;
    align-items: center;
    backdrop-filter: blur(10px);
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }

  .special-popup.show {
    display: flex;
  }

  .special-popup img {
    max-width: 90vw;
    max-height: 90vh;
    object-fit: contain;
    border-radius: 20px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
    animation: popup-appear 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

  .special-popup.hide img {
    animation: popup-disappear 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
  }

  @keyframes popup-appear {
    0% {
      transform: scale(0) rotate(0deg);
      opacity: 0;
    }
    50% {
      transform: scale(1.1) rotate(180deg);
    }
    100% {
      transform: scale(1) rotate(360deg);
      opacity: 1;
    }
  }

  @keyframes popup-disappear {
    0% {
      transform: scale(1) rotate(0deg);
      opacity: 1;
    }
    50% {
      transform: scale(1.1) rotate(-180deg);
    }
    100% {
      transform: scale(0) rotate(-360deg);
      opacity: 0;
    }
  }

  .floating-heart {
    position: fixed;
    font-size: 2rem;
    pointer-events: none;
    z-index: 1000;
    animation: float-away 1.5s ease-out forwards;
    opacity: 1;
    transform-origin: center center;
  }

  @keyframes float-away {
    0% {
      transform: translate(0, 0) scale(0.5) rotate(0deg);
      opacity: 1;
    }
    20% {
      transform: translate(calc(var(--end-x) * 0.2), calc(var(--end-y) * 0.2)) scale(1.2) rotate(calc(var(--rotation) * 0.3));
      opacity: 1;
    }
    50% {
      opacity: 1;
      transform: translate(calc(var(--end-x) * 0.6), calc(var(--end-y) * 0.6)) scale(1.5) rotate(calc(var(--rotation) * 0.6));
    }
    100% {
      transform: translate(var(--end-x), var(--end-y)) scale(0.8) rotate(var(--rotation));
      opacity: 0;
    }
  }
</style>
